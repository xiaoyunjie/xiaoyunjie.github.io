{"meta":{"title":"猪蹄胖的窝","subtitle":null,"description":"孩儿们,造起来","author":"Browser","url":"https://www.browsersytle.cn","root":"/blog/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-06-05T07:14:44.119Z","updated":"2019-06-05T07:14:44.119Z","comments":false,"path":"/404.html","permalink":"https://www.browsersytle.cn//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-06-05T07:19:14.487Z","updated":"2019-06-05T07:19:14.484Z","comments":true,"path":"about/index.html","permalink":"https://www.browsersytle.cn/about/index.html","excerpt":"","text":"个人详细介绍运维开发一枚，平时较忙，放假就想懒懒的躺着不动，所以文章更新较慢。其实平时的积累都有写成文档，只是慵懒的躺着时间久了，发布都不想发布，哈哈"},{"title":"书单","date":"2019-06-04T06:55:20.407Z","updated":"2019-06-04T06:55:20.407Z","comments":false,"path":"books/index.html","permalink":"https://www.browsersytle.cn/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-06-05T07:14:27.727Z","updated":"2019-06-05T07:14:27.727Z","comments":false,"path":"categories/index.html","permalink":"https://www.browsersytle.cn/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-06-05T07:14:10.824Z","updated":"2019-06-05T07:14:10.824Z","comments":true,"path":"links/index.html","permalink":"https://www.browsersytle.cn/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-06-04T06:55:20.407Z","updated":"2019-06-04T06:55:20.407Z","comments":false,"path":"repository/index.html","permalink":"https://www.browsersytle.cn/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-05T07:25:15.405Z","updated":"2019-06-05T07:25:15.405Z","comments":false,"path":"tags/index.html","permalink":"https://www.browsersytle.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Moloch网络回溯分析系统","slug":"Moloch网络回溯分析系统","date":"2019-07-16T14:26:49.000Z","updated":"2019-07-16T14:32:06.378Z","comments":true,"path":"2019/07/16/Moloch网络回溯分析系统.html","link":"","permalink":"https://www.browsersytle.cn/2019/07/16/Moloch网络回溯分析系统.html","excerpt":"","text":"Moloch 是一个由AOL开源的，能够大规模的捕获IPv4数据包(PCAP)、索引和数据库系统，由以下三个部分组成：capture ：绑定interface运行的单线程C语言应用viewer ：运行在capture主机上的node.js web应用elasticsearch : moloch的数据检索驱动Moloch git地址 git主页上README有较为详细的安装说明，以下是参照官方说明，我的安装记录，本章只为了快速搭建Moloch，都是使用RPM包安装。 一、系统要求和环境搭建存储数据包对机器的性能要求moloch提供了评估页面 Moloch Estimators本次安装，找了一台陈旧的机器，4G 1333内存，i3CPU，150 interl SSD，一块500GB HDD，这个配置相对简陋，并且我把所有组件都安装在了一台机器上面，如果有条件的话，请把Capture Machines和Elasticsearch Machines组件分开来安装，由于elasticsearch相当吃内存，2G内存的机器基本带不起来。Linux 系统(官方支持Centos、ubuntu、OS x)JDK (elasticsearch依赖，推荐8u65)python(nodejs 运行依赖，一般系统都自带v2.7满足需求)nodejs(当前的moloch版本支持node)Moloch is no longer supported on 32 bit machines内核4.X有助于抓包性能提升 二、安装elasticsearchES可以选择在moloch安装时安装，也可以单独安装，我这边选择单独安装，从elasticsearch官网下载rpm包，下载地址,最新的elasticsearch版本是v6.2.0，由于moloch支持较低版本，下载ealsticsearch-5.6.6版本的RPM包下载JDK12345678yum install -y wget curl perl-JSON perl-libwww-perl libyaml-devel ##依赖组件wget http://iso.epoint.com.cn/JDK/jdk-8u65-linux-x64.rpm ##下载jdkwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.6.rpm ##下载elasticsearchrpm -ivh jdk-8u65-linux-x64.rpm ##安装jdkrpm -ivh elasticsearch-5.6.6.rpm ##安装elasticsearchsystemctl daemon-reload ##重载修改过的配置文件systemctl enable elasticsearch.service ##开机启动elasticsearchsystemctl start elasticsearch.service ##启动elasticsearch 三、安装Moloch先去官网下载安装包Downloads，我下载的是Nightly版本，获取最新特性12wget https://files.molo.ch/builds/centos-7/moloch-nightly.x86_64.rpm ##下载molochrpm -ivh moloch-nightly.x86_64.rpm ##安装moloch 四、配置Moloch1234567891011121314/data/moloch/bin/Configure ##moloch基本配置Found interfaces: lo;ens160Semicolon ';' seperated list of interfaces to monitor [eth1] ens160 ##选择监听网卡，多个网卡用;隔开Install Elasticsearch server locally for demo, must have at least 3G of memory, NOT recommended for production use (yes or no) [no] no ##本机寻找elasticsearchElasticsearch server URL [http://localhost:9200] http://localhost:9200 ##本机的elasticsearch的URLPassword to encrypt S2S and other things [no-default] moloch ##配置密码Moloch - Creating configuration filesNot overwriting /data/moloch-nightly/etc/config.ini, delete and run again if update required (usually not), or edit by handInstalling systemd start files, use systemctlMoloch - Downloading GEO files2018-02-07 19:29:06 URL:http://www.maxmind.com/download/geoip/database/asnum/GeoIPASNum.dat.gz [2513493/2513493] -&gt; \"GeoIPASNum.dat.gz\" [1]2018-02-07 19:29:16 URL:http://download.maxmind.com/download/geoip/database/asnum/GeoIPASNumv6.dat.gz [2896577/2896577] -&gt; \"GeoIPASNumv6.dat.gz\" [1]2018-02-07 19:29:22 URL:http://www.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz [700469/700469] -&gt; \"GeoIP.dat.gz\" [1]2018-02-07 19:29:28 URL:http://geolite.maxmind.com/download/geoip/database/GeoIPv6.dat.gz [1110013/1110013] -&gt; \"GeoIPv6.dat.gz\" [1] 初始化、升级 Elasticsearch Moloch配置12/data/moloch-nightly/db/db.pl http://localhost:9200 init ##第一次安装初始化、或者想删除所有数据/data/moloch-nightly/db/db.pl http://localhost:9200 upgrade ##升级moloch 数据包 添加admin账户1/data/moloch-nightly/bin/moloch_add_user.sh admin \"Admin User\" moloch --admin ##新增admin账户，密码是moloch 开启所有服务1234systemctl enable molochcapture.service ##开机启动Capturesystemctl start molochcapture.service ##启动Capturesystemctl enable molochviewer.service ##开机启动Viewersystemctl start molochviewer.service ##启动Viewer 日志查看12tail -f /data/moloch-nightly/log/capture.logtail -f /data/moloch-nightly/log/viewer.log 数据清理ES的数据增长根据流量大小决定，如果不定期清理ES数据，总有一天空间会写满，所以要定期清理ES数据12345678cd /data/moloch-nightly/dbvim daily.sh#ES服务端口ESHOSTPORT=127.0.0.1:9200#保留ES日志七天RETAINNUMDAYS=7crontab -e 0 1 * * * sh /data/moloch-nightly/db/daily.sh &gt;&gt; /var/log/moloch/daily.log 2&gt;&amp;1 五、登入Moloch系统访问http://molochhost:8005user : adminpassword : moloch 六、FAQCapture服务抓取的数据包文件存储在/data/moloch-nightly/raw/ 目录下，如果流量大的化可以mount大一点的硬盘Elasticsearch由于是通过rpm包默认安装，数据文件存在路径/var/lib/elasticsearch/nodes/0/indices,可以修改elasticsearch.yml配置文件path to data,path to logs,重启服务生效镜像网卡开启混杂模式 ifconfig eth0 promiscfreeSpaceG = 5%存放PCAP文件的空间重复使用的临界空间值插入手动添加的PCAP文件 ${moloch_dir}/bin/moloch-capture -c [config_file] -r [pcap_file]无法启动molochcapture.service, ERROR - pcap open failed - Couldn't open file: '/data/moloch-nightly/raw/localhost-180207-00000038.pcap' with Permission denied (13). 原因是用户问题，chownnobody:root raw/ ,设置nobody用户就可以了path.data path.logs设置了指定路径后，无法启动elasticsearch服务，原因是指定的路径权限是root，需要修改成elasticsearch用户和组","categories":[{"name":"network","slug":"network","permalink":"https://www.browsersytle.cn/categories/network/"}],"tags":[{"name":"moloch","slug":"moloch","permalink":"https://www.browsersytle.cn/tags/moloch/"}]},{"title":"qemu制作CentOS7虚拟机镜像文件","slug":"qemu制作CentOS7虚拟机镜像文件","date":"2019-07-16T14:24:28.000Z","updated":"2019-07-16T14:25:06.797Z","comments":true,"path":"2019/07/16/qemu制作CentOS7虚拟机镜像文件.html","link":"","permalink":"https://www.browsersytle.cn/2019/07/16/qemu制作CentOS7虚拟机镜像文件.html","excerpt":"","text":"一、硬件支持1234567#Intel,有输出表示支持虚拟化cat /proc/cpuinfo | grep vmxflags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopologytsc_reliable nonstop_tsc pni pclmulqdq vmx ssse3 cx16 pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm arat tpr_shadow vnmi ept vpid fsgsbase tsc_adjustsmep#AMDcat /proc/cpuinfo | grep svm如果是vm虚拟机，记得开启cpu的虚拟化功能 二、安装kvm笔者的环境是CentOS 7.3 16111234yum install epel-releaseyum install qemu#安装完后，会发现在/usr/bin/ 目录下没有qemu-kvm文件，文件在/usr/libexec/目录下，只能做一个软连接ln -s /usr/libexec/qemu-kvm /usr/bin/qemu-kvm 三、建立虚拟磁盘在/opt目录下新建一个kvm文件夹，并且建立一个ISO文件夹，里面放入要安装的系统iso镜像123#创建一个磁盘40G大小，格式为qcow2的文件qemu-img create -f qcow2 centos7.qcow2 40G#文件格式有很多，qcow2 raw qcow cow vmdk 等 四、安装操作系统12345678910111213/usr/bin/qemu-kvm -cpu kvm64 -m 2048 -boot c \\ -drive file=/opt/kvm/centos7.qcow2,if=virtio,index=0,media=disk,format=qcow2 \\ -drive file=/opt/kvm/ISO/CentOS-7.4-x86_64-Minimal-1708.iso,index=1,media=cdrom \\ -net nic,macaddr=52:54:ac:5a:d6:a1,id=eth0,model=e1000 \\ -rtc base=localtime \\ -vnc :1 &amp;#-cpu cpu类型#-m 虚拟机使用的内存#-boot c c是硬盘启动，d光驱启动#-cdrom 使用光盘镜像文件#-net 指定网卡mac和vlan（默认vlan0）#-rtc 使用本地时间同步虚拟机时间#-vnc 开启一个展示vnc服务接口运行命令后，kvm会启动进行操作系统安装，并且可以通过ss -tln看到启动了一个vnc的端口5900+下载vnc客户端软件，通过vnc客户端软件进行操作系统安装 五、注意点想要强制指定虚拟网卡的名称eth0，安装完系统重启后进行一下配置更改ifcfg-ens192文件名1mv ifcfg-ens192 ifcfg-eth0修改ifcfg-ens192配置文件1234vim ifcfg-ens192DEVICE=eth0NAME=eth0ONBOOT=yes编辑grub文件123vim /etc/default/grub#在rhgb quiet 后面添加 net.ifnames=0 biosdevname=0GRUB_CMDLINE_LINUX=\"crashkernel=auto rd.lvm.lv=cl/root rd.lvm.lv=cl/swap rhgb quiet net.ifnames=0 biosdevname=0\"重新建立grub文件并reboot12grub2-mkconfig -o /boot/grub2/grub.cfgreboot启动虚拟机123/usr/bin/qemu-kvm -cpu kvm64 -m 2048 -boot c \\ -drive file=/opt/image/centos7.qcow2 \\ -vnc :1 &amp;","categories":[{"name":"linux","slug":"linux","permalink":"https://www.browsersytle.cn/categories/linux/"}],"tags":[{"name":"qemu","slug":"qemu","permalink":"https://www.browsersytle.cn/tags/qemu/"}]},{"title":"openvpn2.7+easy3.0+tun","slug":"openvpn2-7-easy3-0-tun","date":"2019-07-16T14:01:49.000Z","updated":"2019-07-16T14:18:32.099Z","comments":true,"path":"2019/07/16/openvpn2-7-easy3-0-tun.html","link":"","permalink":"https://www.browsersytle.cn/2019/07/16/openvpn2-7-easy3-0-tun.html","excerpt":"","text":"根据业务需求提出总公司与多个分公司需要内网互访，在外人员要访问总公司网络且也要访问分公司部分内网，并且分公司和分公司之间也要能网络互访 解决方案：总部作为Server端，连接所有分公司和外部员工分公司通过旁路模式或网关模式连接到Server端，并且添加分公司路由在外人员直接通过拨vpn，进行访问 一、Server端安装配置 关闭selinux12setenforce 0sed -i '/^SELINUX=/c\\SELINUX=disabled' /etc/selinux/config 安装openvpn和必要组件easy-rsa是一个用于构建和管理PKI CA的CLI实用程序。用外行的话来说，这意味着创建一个根证书颁发机构，并请求和签署证书，包括子CA和证书撤销列表1yum install -y epel-release openvpn easy-rsa expect zip 拷贝文件123cp /usr/share/doc/openvpn-2.4.5/sample/sample-config-files/server.conf /etc/openvpn/servercp -r /usr/share/easy-rsa /etc/openvpncp -r /usr/share/doc/easy-rsa-3.0.3/vars.example /etc/openvpn/easy-rsa/3.0/vars 配置文件修改server.configvim /etc/openvpn/server/server.conf12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#监听端口port 1194#监听协议proto udp#路由模式dev tun#根证书ca /etc/openvpn/server/ca.crt#服务器证书cert /etc/openvpn/server/openvpnserver.crt#服务器秘钥key /etc/openvpn/server/openvpnserver.key#密钥交换协议文件dh /etc/openvpn/server/dh.pem# 证书注销验证crl-verify /etc/openvpn/easy-rsa/3.0/pki/crl.pem#dhcp地址池server 172.28.16.0 255.255.240.0#记录登录过的地址ifconfig-pool-persist ipp.txt#推送的路由push \"route 192.168.80.0 255.255.255.0\"push \"route 192.168.1.0 255.255.255.0\"#########添加LAN路由##############client-config-dir /etc/openvpn/ccd#客户端所在子网网段route 192.168.1.0/24###################################启用管理服务器端口，用作在线kill客户端用户,端口自定义management localhost 1194;push \"redirect-gateway def1 bypass-dhcp\"#推送DNSpush \"dhcp-option DNS 114.114.114.114\"push \"dhcp-option DNS 223.5.5.5\"#客户端访问客户端client-to-client#120秒内无法ping通，则认为丢失重新vpn，重新连接keepalive 10 120tls-auth /etc/openvpn/server/ta.key 0 cipher AES-256-CBC#数据压缩comp-lzo#最大连接数max-clients 10000user nobodygroup nobody#通过keepalive检测超时后，重新启动vpn，不重新读取keys,保留第一次使用的keyspersist-key#通过keepalive检测超时后,重新启动vpn,一直保持tun或tap设备是linkup的，否则网络连接会先linkdown然后linkuppersist-tun#把openvpn的状态写入日志中status /var/log/openvpn/openvpn-status.log 3#配合status，记录客户端字段：虚拟地址，用户名，真实地址status-version 1#日志log /var/log/openvpn/openvpn.log#日志内容追加log-append /var/log/openvpn/openvpn.log#日志记录级别verb 3#最多20条相同消息类别的连续消息将输出到日志中mute 20#当服务器重新启动时通知客户端，使其能够自动重新连接explicit-exit-notify 1修改varsvim /etc/openvpn/easy-rsa/3/vars1234567891011121314151617181920set_var EASYRSA \"$PWD\"set_var EASYRSA_PKI \"$EASYRSA/pki\"set_var EASYRSA_DN \"cn_only\"set_var EASYRSA_REQ_COUNTRY \"CN\"set_var EASYRSA_REQ_PROVINCE \"JIANGSU\"set_var EASYRSA_REQ_CITY \"SUZHOU\"set_var EASYRSA_REQ_ORG \"OpenVPN CERTIFICATE AUTHORITY\"set_var EASYRSA_REQ_EMAIL \"openvpn@test.com.cn\"set_var EASYRSA_REQ_OU \"test\"set_var EASYRSA_KEY_SIZE 2048set_var EASYRSA_ALGO rsaset_var EASYRSA_CA_EXPIRE 7000set_var EASYRSA_CERT_EXPIRE 3650# 证书注销验证的时间，默认是180天set_var EASYRSA_CRL_DAYS 3650set_var EASYRSA_NS_SUPPORT \"no\"set_var EASYRSA_NS_COMMENT \"Easy-RSA Generated Certificate\"set_var EASYRSA_EXT_DIR \"$EASYRSA/x509-types\"set_var EASYRSA_SSL_CONF \"$EASYRSA/openssl-1.0.cnf\"set_var EASYRSA_DIGEST \"sha256\" 创建证书服务端证书123456789101112131415161718cd /etc/openvpn/easy-rsa/3.0./easyrsa init-pki#创建ca，输入密码(两次)./easyrsa build-ca nopass#生成 Diffie Hellman 参数./easyrsa gen-dhopenvpn --genkey --secret ta.keycp -r ta.key /etc/openvpn/#创建服务端证书,生成请求,使用gen-req来生成req./easyrsa gen-req openvpnserver#签发证书，输入ca密码./easyrsa sign-req server openvpnserver#将服务端证书拷贝到指定目录(对应上面配置的证书路径)mv ca.crt /etc/openvpn/servermv issued/openvpnserver.crt /etc/openvpn/servermv private/openvpnserver.key /etc/openvpn/servermv dh.pem /etc/openvpn/servermv ta.key /etc/openvpn/server 网络配置开启内核转发功能12echo \"net.ipv4.ip_forward = 1\" &gt; /etc/sysctl.confsysctl -p配置iptables12345678910111213141516171819#停用firewalld，安装iptablessystemctl stop firewalldsystemctl disable firewalldyum install iptables iptables-servicessystemctl start iptablessystemctl enable iptables#查看iptables规则和序号iptables -nvL --line-number#放通1194的tcp和udp端口iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp --dport 1194 -j ACCEPTiptables -I INPUT 6 -p udp -m state --state NEW -m udp --dport 1194 -j ACCEPTiptables -I FORWARD 1 -m state --state RELATED,ESTABLISHED -j ACCEPTiptables -I FORWARD 2 -s 172.28.16.0/20 -d 192.168.0.0/16 -j ACCEPT#配置nat转发iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE#保存iptables配置service iptables save#重新加载iptables配置文件service iptables restart 配置证书注销验证客户端使用证书登入，在注销时，可以使用easy-rsa revoke $vpnuser进行注销证书，并在index.txt下进行日志记录，但是在实践过程中发现，仅仅在服务端注销证书后，客户端仍然可以登入，原因是openvpn没有调用注销客户端信息的资料，需要在server.conf配置文件中引用crl.pem注销文件。V为可用，R为注销创建crl.pem更新文件12/etc/openvpn/easy-rsa/3/easyrsa gen-crlchmod 666 /etc/openvpn/easy-rsa/3/pki/crl.pem配置server.conf1echo \"crl-verify /etc/openvpn/easy-rsa/3.0/pki/crl.pem\" &gt;&gt; /etc/openvpn/server.conf注意：在vars文件中的set_var EASYRSA_CRL_DAYS默认是注释的，并且默认天数是180天，所以创建的crl.pem超过180天后，客户端连接服务端会失败报错WARNING: Failed to stat CRL file, not (re)loading CRL。所以修改vars文件的EASY_CRL_DAYS的天数，建议改成3650，十年够用了。然后重新生成crl.pem证书，重启openvpn服务，搞定。 在线查看客户端连接以及关闭客户端连接在线查看客户端连接信息要想查看客户端连接信息，需要在server.conf配置文件中添加日志记录配置(配置文件已经包含在上面server.conf文件中)1234#把openvpn的状态写入日志中status /var/log/openvpn/openvpn-status.log 3#配合status，记录客户端字段：虚拟地址，用户名，真实地址，版本选择可以是1、2、3status-version 1查看日志： tail -f /var/log/openvpn/openvpn-status.log在线关闭客户端连接openvpn支持在线断开client用户，前提在server.conf配置中添加management localhost port12345678910#!/bin/bash##Date: 2018-10-23##Author: Browser##Description: turnoff the online users##Version: 1.0vpnuser=$1(sleep 1echo kill $vpnusersleep 1) | telnet localhost 1194关闭在线用户：bash openvpn_close_client.sh vpnuser 启动Server端openvpn服务1234#由于ca证书无密码，所以直接启动systemctl start openvpn@server#设置开机启动systemctl enable openvpn@server 客户端证书文件客户端需要的证书：client.crt、client.key、ca.crt、ta.key、client.ovpn客户端配置文件vim client.ovpn1234567891011121314151617181920clientdev tunproto udpresolv-retry infinitenobindremote xxxxxx 1194#将证书指定为服务器remote-cert-tls servercomp-lzokeepalive 10 120persist-keypersist-tunverb 5cipher AES-256-CBC#redirect-gatewayroute-method exeroute-delay 2status client-status.log#log-append client.logkey-direction 1为了方便自动化创建、删除vpn账号，需要将默认client.ovpn、ca.key、ta.key放到一个指定的文件夹下mkdir -p /etc/openvpn/easy-rsa/3/pki/Epoint，将三个文件拷贝到此文件夹下 自动化创建管理秘钥自动化创建秘钥需要账号密码交互，需要用到expect工具安装expect1yum install expect -y创建vpnuser脚本脚本中在创建用户证书时没有配置密码，直接nopass，也可以配置密码，这样客户端登入时则需要通过密码登入vim /etc/openvpn/easy-rsa/3/openvpn_user_create.expect123456789101112131415161718192021#!/usr/bin/expect -f##Date: 2018-05-09##Author: Browser##Description: create the vpnuser certificate##Version: 1.0if $argc&lt;1 &#123; puts stderr \"Usage: $argv0 need argv.\\n\" exit 1 &#125; set vpnuser [lindex $argv 0] set path /etc/openvpn/easy-rsa/3.0spawn $path/easyrsa build-client-full $vpnuser expect \"Enter PEM pass phrase:\" send \"$vpnuser@vpn\\r\" expect \"Verifying - Enter PEM pass phrase:\" send \"$vpnuser@vpn\\r\"# expect \"Enter pass phrase for /etc/openvpn/easy-rsa/3.0/pki/private/ca.key:\"#输入ca证书配置的密码# send \"password\\r\" expect eof exit删除vpnuser脚本vim /etc/openvpn/easy-rsa/3/openvpn_user_delete.expect1234567891011121314151617181920212223#!/usr/bin/expect -f##Date: 2018-05-09##Author: Browser##Description: Delete the vpnuser certification##Version: 1.0if $argc&lt;1 &#123; puts stderr \"Usage: $argv0 need argv.\\n\" exit 1 &#125; set vpnuser [lindex $argv 0] set path /etc/openvpn/easy-rsa/3.0 spawn $path/easyrsa revoke $vpnuser expect \"Continue with revocation:\" send \"yes\\r\"# expect \"Enter pass phrase for /etc/openvpn/easy-rsa/3.0/pki/private/ca.key:\"# send \"epoint\\r\" expect eofspawn $path/easyrsa gen-crl expect eofchmod 666 /etc/openvpn/easy-rsa/3/pki/crl.pem exit12chmod 755 openvpn_user_create.expectchmod 755 openvpn_user_delete.expect上述两个脚本是用来创建vpn账号的证书和私钥通过下面这个脚本，可以直接将vpn账号的私钥、证书、ca、ta.key、dh.epm和client.opvn结合到一起，直接打包输出到指定文件夹下，方便提取和删除创建vpnuser命令脚本vim /usr/local/bin/vpnuser1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#!/bin/bash##Date: 2018-08-30##Author: Browser_xyj##Description: add or del vpnuser##Version: 1.2num=$#choose=$1vpn_user=$2DIR=/etc/openvpn/easy-rsa/3.0/pkiCLIENT=/etc/openvpn/client openvpn_help() #帮助函数 &#123; echo '添加vpn用户执行命令: vpnuser add vpn用户名' echo '删除vpn用户执行命令: vpnuser del vpn用户名' &#125; add_user() #新建vpn用户函数&#123;if [ -f $DIR/issued/$vpn_user.crt ];then echo \"==================&lt;温馨提示&gt;==================\" echo \"VPN用户：$vpn_user已存在,请检查后操作!!\" echo \"==============================================\"else cd /etc/openvpn/easy-rsa/3.0 #创建用户 ./openvpn_user_create.expect $vpn_user &amp;&gt;/dev/null #创建client文件夹 mkdir -p $CLIENT/$vpn_user cp $DIR/Epoint/client.ovpn $CLIENT/$vpn_user/$vpn_user.ovpn #echo ca、key、crt echo \"&lt;ca&gt;\" &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn cat $DIR/Epoint/ca.crt &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn echo \"&lt;/ca&gt;\" &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn echo \"&lt;tls-auth&gt;\" &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn cat $DIR/Epoint/ta.key &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn echo \"&lt;/tls-auth&gt;\" &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn echo \"&lt;cert&gt;\" &gt;&gt;$CLIENT/$vpn_user/$vpn_user.ovpn cat $DIR/issued/$vpn_user.crt &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn echo \"&lt;/cert&gt;\" &gt;&gt;$CLIENT/$vpn_user/$vpn_user.ovpn echo \"&lt;key&gt;\" &gt;&gt;$CLIENT/$vpn_user/$vpn_user.ovpn cat $DIR/private/$vpn_user.key &gt;&gt; $CLIENT/$vpn_user/$vpn_user.ovpn echo \"&lt;/key&gt;\" &gt;&gt;$CLIENT/$vpn_user/$vpn_user.ovpn #client打包 cd $CLIENT zip -r $vpn_user.zip $vpn_user &amp;&gt;/dev/null mv $vpn_user.zip /opt/vpnuser/ echo \"=========================&lt;成功提示&gt;============================\" echo \"VPN用户:$vpn_user创建成功!\" echo \"=========================&lt;成功提示&gt;============================\" echo \"vpn用户:$vpn_user 密钥已生成在/opt/vpnuser 下，请自行获取！！！\" echo \"===============================================================\" fi&#125; del_user() #删除vpn用户函数&#123; cd /etc/openvpn/easy-rsa/3.0/ ./openvpn_user_delete.expect $vpn_user &amp;&gt;/dev/null rm -rf $DIR/issued/$vpn_user.crt rm -rf $DIR/private/$vpn_user.key rm -rf $DIR/reqs/$vpn_user.req rm -rf $CLIENT/$vpn_user rm -rf /opt/vpnuser/$vpn_user.zip echo \"=========================&lt;成功提示&gt;============================\" echo \"注销并已删除vpn用户:$vpn_user成功!\" echo \"===============================================================\"&#125; main_vpn() #主函数&#123;if [ $num -ne 2 ];then echo \"=======================&lt;错误提示&gt;========================\" echo \"输入参数无效,请检查!\" echo \"=======================&lt;帮助提示&gt;========================\" openvpn_help echo \"=========================================================\" else if [ $choose = \"add\" ];then add_user elif [ $choose = \"del\" ];then del_user else echo \"=======================&lt;错误提示&gt;========================\" echo '输入参数类型无效,类型只包含add|del' echo \"=======================&lt;帮助提示&gt;========================\" openvpn_help echo \"=========================================================\" fifi&#125;####main######main_vpn添加权限chmod 755 vpnuser检测变量PATHecho $PATH/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin 账号创建测试创建用户1vpnuser add test删除用户1vpnuser del test 二、Client端安装配置 windows客户端openvpn-2.4.6客户端下载下载windows客户端软件，将压缩文件夹放入config文件夹，解压缩就可以，双机运行openvpn，右下角右击选择指定vpn进行连接（config文件夹下可以放置多个账号文件） Linux客户端1yum install openvpn zip unzip将账号压缩包文件传到/etc/openvpn/client目录下解压启动脚本vim /root/openvpn_start.sh1234567891011#!/bin/bashvpnuser=$1if [[ $# -le 0 ]];then echo -e \"\\e[1;31m =======Please input vpnuser======= \\e[0m\" exit 1fiopenvpn --daemon --cd /etc/openvpn/client/$1 --config $1.ovpn --log-append /var/log/openvpn.log# --daemon ：openvpn以daemon方式启动# --cd dir : 配置文件的目录，openvpn初始化前，先前切换到此目录# --config file ：客户端配置文件的路径# --log-append file ：日志文件路径，如果文件不存在会自动创建有多个账号的情况下，可以通过此脚本自行选择连接sh openvpn_start.sh $vpnuser关闭脚本vim /root/openvpn_stop.sh12#!/bin/bashps axu | grep \"openvpn\" | grep -v grep | awk '&#123; print $2 &#125;' | xargs kill -9sh openvpn_stop.sh MacOS客户端Tunnelblick下载地址Tunnelblick官网Mac版本使用 很方便，安装好后，直接双机ovpn证书文件，提示输入Mac账号密码，然后就直接注入到tunnelblick软件中，选择指定证书进行vpn连接。 iPhone客户端17年左右还是能从appstore中下载openvpn的app，但是之后就被下架，如果想要使用openvpn的app，则需要通过国外账号登入appstore中下载美版的openvpn。在openvpn服务端创建证书，将证书ovpn通过邮件发给自己，并且在手机端邮箱中下载证书文件，并选择手机端openvpn程序打开，这样就能把证书文件导入到openvpn app中，配置密码保存即可，然后就能正常连接。连接有错误，可以查看右上角的日志信息，目前app端不支持dev tap 模式 三、客户端Lan访问配置以下是示例，根据示例进行配置分公司有一个openvpn服务器，后面有一个lan（10.10.2.0/24），后面有两个带有lans的客户端：cleint1与lan 10.10.1.0/24client2与lan 10.10.3.0/24希望所有3个lans上的机器能够使用tun（路由）设置进行通信。其后面有LAN的每台计算机都必须启用IP转发。在此示例中，表示服务器和client1 / client2。用户在他的server.conf中需要以下内容：123456route 10.10.1.0 255.255.255.0route 10.10.3.0 255.255.255.0push \"route 10.10.2.0 255.255.255.0\"push \"route 10.10.1.0 255.255.255.0\"push \"route 10.10.3.0 255.255.255.0\"client-to-clientiroute条目告诉openvpn服务器哪个客户端负责网络。12345#中心服务端创建ccd目录mkdir -p /etc/openvpn/ccdcd /etc/openvpn/ccd#vpnuser账号名要对应好，因为系统是根据账号名进行识别echo \"iroute 10.10.2.0 255.255.255.0\" &gt; $vpnuser上面为了让客户端的lan与lan进行路由转发，进行了openvpn Server端的配置，配置完成后，仅仅只能访问到client本机地址，还无法访问相关lan网段其他主机，需要在此client端配置路由转发才能访问123456789101112#开启路由转发echo \"net.ipv4.ip_forward = 1\" &gt; /etc/sysctl.conf sysctl -p#配置nat转发iptables -t nat -A POSTROUTING -o eno16780032 -s 172.28.16.0/20 -j MASQUERADE配置forward路由转发iptables -I FORWARD 1 -m state --state RELATED,ESTABLISHED -j ACCEPTiptables -I FORWARD 2 -s 172.28.16.0/28 -d 192.168.208.0/24 -i tun0 -o eth0 -m conntrack --ctstate NEW -j ACCEPT#清空iptables规则#iptables -F#保存serice iptables save","categories":[{"name":"network","slug":"network","permalink":"https://www.browsersytle.cn/categories/network/"}],"tags":[{"name":"openvpn","slug":"openvpn","permalink":"https://www.browsersytle.cn/tags/openvpn/"}]},{"title":"Nginx限制并发连接数和带宽","slug":"Nginx限制并发连接数和带宽","date":"2019-06-19T14:41:16.000Z","updated":"2019-06-19T15:08:03.320Z","comments":true,"path":"2019/06/19/Nginx限制并发连接数和带宽.html","link":"","permalink":"https://www.browsersytle.cn/2019/06/19/Nginx限制并发连接数和带宽.html","excerpt":"","text":"一、TCP连接对于一些服务器流量异常、负载过大，甚至是大流量的恶意攻击访问等，进行并发数的限制（共享内存和并发限制需结合系统定制）limit_conn_zone 设置共享内存区域参数123Syntax: limit_conn_zone key zone=name:size;Default: —Context: httplimit_conn 设置共享内存区域和给定键值的最大允许连接数123Syntax: limit_conn zone number;Default: —Context: http, server, locationlimit_conn_log_level 日志可以调整级别，默认error12345Syntax: limit_conn_log_level info | notice | warn | error;Default: limit_conn_log_level error;Context: http, server, location#This directive appeared in version 0.8.18.limit_conn_status 返回状态码响应拒绝请求，默认50312345Syntax: limit_conn_status code;Default: limit_conn_status 503;Context: http, server, location#This directive appeared in version 1.3.15.示例12345678910http &#123;limit_conn_zone $binary_remote_addr zone=perip:10m;limit_conn_zone $server_name zone=perserver_tcp:10m;server &#123; location /download/ &#123; limit_conn perserver_tcp 100;#虚拟服务同时只允许100个连接 limit_conn perip 10;#每个IP同时只允许10个连接 &#125; &#125;&#125;如果共享内存空间10m被耗尽，服务器将会对后续所有的请求返回503 (Service Temporarily Unavailable)错误将限制每个客户机IP到服务器的连接数量，同时限制到虚拟服务器的连接总数: 二、HTTP连接限制来自单个IP地址的请求处理频率，每秒固定处理请求数，推迟过多请求。以此来防止应用层的DDOS攻击（共享内存和请求频率需结合系统定制）limit_req_zone 设置共享内存区域参数123Syntax: limit_req_zone key zone=name:size rate=rate;Default: —Context: httplimit_req 设置共享内存区域、突发大小、延时123Syntax: limit_req zone=name [burst=number] [nodelay];Default: —Context: http, server, locationlimit_req_log_level 日志可以调整级别，默认error12345Syntax: limit_req_log_level info | notice | warn | error;Default: limit_req_log_level error;Context: http, server, location#This directive appeared in version 0.8.18.limit_req_status 返回状态码响应拒绝请求，默认50312345Syntax: limit_req_status code;Default: limit_req_status 503;Context: http, server, location#This directive appeared in version 1.3.15.示例1234567891011http &#123;limit_req_zone $binary_remote_addr zone=ten:20m rate=100r/s;limit_req_zone $server_name zone=perserver_http:20m rate=1000r/s;server &#123; location /search/ &#123; limit_req zone=ten burst=500 nodelay; #每秒100个请求，突发不超过500个请求，降低延时请求 limit_req zone=perserver_http burst=1500; #虚拟服务同时每秒1000个请求，突发不超过1500 &#125; &#125;&#125;如果不希望在请求受到限制时延迟过多的请求，加入参数nodelay当且仅当当前级别上没有limit_req指令时，这些指令才从上一级别继承同时可以有几个limit_req指令 三、带宽限制limit_rate限制对客户机的响应传输速率1234Syntax: limit_rate rate;Default: limit_rate 0;Context: http, server, location, if in location限制对客户机的响应传输速率。速率以字节/秒为单位指定。零值禁止速率限制。此限制是针对每个请求设置的，因此如果客户端同时打开两个连接，总体速率将是指定限制的两倍。示例123456server &#123; if ($slow) &#123; set $limit_rate 4k; &#125; ...&#125;速率限制也可以在$limit_rate变量中设置limit_rate_after设置初始值，在此之后，对客户机响应的进一步传输将受到速率限制。12345Syntax: limit_rate_after size;Default: limit_rate_after 0;Context: http, server, location, if in locationThis directive appeared in version 0.8.0.示例12345location /flv/ &#123; flv; limit_rate_after 500k; limit_rate 50k;&#125; 四、参考值Nginx服务器上查看ESTABLISHED的连接数，根据这个连接数来限制tcp连接，上浮10%1Shell&gt;netstat -n | awk '/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'Web浏览器查看nginx服务器的epoint_base_status查看Req/s，根据这个值进行请求数的限制，上浮10%","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://www.browsersytle.cn/categories/Nginx/"}],"tags":[{"name":"limit","slug":"limit","permalink":"https://www.browsersytle.cn/tags/limit/"}]},{"title":"browser","slug":"browser","date":"2019-05-20T13:58:47.000Z","updated":"2019-06-05T08:30:03.274Z","comments":true,"path":"2019/05/20/browser.html","link":"","permalink":"https://www.browsersytle.cn/2019/05/20/browser.html","excerpt":"","text":"FLASK 安装flask123456789101112131415# 安装pipyum install python-pip# 安装pipenvpip install pipenv# 创建虚拟环境mkdir helloflask &amp;&amp; cd helloflaskpipenv install# 激活虚拟环境,从当前目录的.env读取环境变量pipenv shell/run# 查看当前环境依赖情况pipenv graph# 安装flaskpipenv install flask# 更新flaskpipenv update flaskPipfile: 记录项目依赖包列表Pipfile.lock: 记录了固定版本的详细依赖包列表 环境变量环境变量优先级： 手动设置》.evn设置》.flaskenv设置手动设置环境变量1234# linuxexport FLASK_APP=hello# windowsset FLASK_APP=hello安装python-dotenv12345pipenv isntall python-dotenv# 创建.env，存储包含敏感信息的环境变量touch .env# 创建 .flaskenv，存储flask相关的公开环境变量touch .flaskenv环境变量中是以键值对的形式的定义每行一个#开头为注释设置.flaskenv1234# 设置开发环境FLASK_ENV=development# 设置appFLASK_APP=hello","categories":[{"name":"python","slug":"python","permalink":"https://www.browsersytle.cn/categories/python/"}],"tags":[{"name":"flask","slug":"flask","permalink":"https://www.browsersytle.cn/tags/flask/"}]}]}